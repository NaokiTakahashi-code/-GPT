// ✅ Naoki式 構造化診断支援AI Webアプリ（Next.js + GPT-4 Turbo 対応）
// 📁 pages/api/diagnose.ts

import { NextApiRequest, NextApiResponse } from 'next';
import OpenAI from 'openai';

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

const SYSTEM_PROMPT = `あなたは、医学生・研修医向けの構造化診断支援AIです。
EBM（Evidence-Based Medicine）とNBM（Narrative-Based Medicine）の両視点から、GPTが診断推論を行います。
出力はすべて教育目的であり、診断確定や医療判断の代替ではありません。

---

## 📥【初めて使う方へ：入力ガイド】
...

## ⑧ 【診断まとめと推奨方針】
...

📌 判断の根拠（文献／スコア／NBM視点）`;

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  const { userInput } = req.body;

  try {
    const completion = await openai.chat.completions.create({
      model: 'gpt-4-turbo',
      messages: [
        { role: 'system', content: SYSTEM_PROMPT },
        { role: 'user', content: userInput }
      ]
    });

    const result = completion.choices[0].message?.content || 'No response.';
    res.status(200).json({ result });
  } catch (error) {
    console.error(error);
    res.status(500).json({ result: 'エラーが発生しました。' });
  }
}

// 📁 pages/index.tsx

import { useState } from 'react';

export default function Home() {
  const [inputText, setInputText] = useState('');
  const [result, setResult] = useState('');
  const [loading, setLoading] = useState(false);

  async function handleSubmit(e: React.FormEvent) {
    e.preventDefault();
    setLoading(true);
    const response = await fetch('/api/diagnose', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ userInput: inputText }),
    });
    const data = await response.json();
    setResult(data.result);
    setLoading(false);
  }

  return (
    <main className="p-6 max-w-3xl mx-auto">
      <h1 className="text-2xl font-bold mb-4">Naoki式GPT診断ナビゲーター</h1>
      <form onSubmit={handleSubmit} className="space-y-4">
        <textarea
          className="w-full p-4 border rounded-md shadow"
          rows={6}
          placeholder="例：65歳男性、2日前から右下腹部痛、SpO₂ 96%、圧痛あり..."
          value={inputText}
          onChange={(e) => setInputText(e.target.value)}
        />
        <button
          type="submit"
          className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700"
          disabled={loading}
        >
          {loading ? '診断中...' : '診断する'}
        </button>
      </form>
      {result && (
        <div className="mt-6 p-4 bg-gray-50 border rounded whitespace-pre-wrap">
          <h2 className="text-lg font-semibold mb-2">診断結果</h2>
          <p>{result}</p>
        </div>
      )}
    </main>
  );
}
